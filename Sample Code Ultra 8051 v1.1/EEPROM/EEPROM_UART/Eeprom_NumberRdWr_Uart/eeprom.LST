C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN eeprom.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE eeprom.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /***************************************************************************************************
   2                                             ExploreEmbedded      
   3           ****************************************************************************************************
   4           * File:   eeprom.c
   5           * Version: 15.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: Contains the library routines for Eeprom Read-Write
   9          
  10          The libraries have been tested on ExploreEmbedded development boards. We strongly believe that the 
  11          library works on any of development boards for respective controllers. However, ExploreEmbedded 
  12          disclaims any kind of hardware failure resulting out of usage of libraries, directly or indirectly.
  13          Files may be subject to change without prior notice. The revision history contains the information 
  14          related to updates. 
  15          
  16          
  17          GNU GENERAL PUBLIC LICENSE: 
  18              This program is free software: you can redistribute it and/or modify
  19              it under the terms of the GNU General Public License as published by
  20              the Free Software Foundation, either version 3 of the License, or
  21              (at your option) any later version.
  22          
  23              This program is distributed in the hope that it will be useful,
  24              but WITHOUT ANY WARRANTY; without even the implied warranty of
  25              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26              GNU General Public License for more details.
  27          
  28              You should have received a copy of the GNU General Public License
  29              along with this program.  If not, see <http://www.gnu.org/licenses/>.
  30          
  31          Errors and omissions should be reported to codelibraries@exploreembedded.com
  32           ***************************************************************************************************/
  33          
  34          
  35          
  36          /***************************************************************************************************
  37                                       Revision History
  38          ****************************************************************************************************
  39          15.0: Initial version 
  40          ***************************************************************************************************/
  41          #include"eeprom.h"
  42          #include"i2c.h"
  43          #include"delay.h"
  44          
  45          
  46          
  47          /***************************************************************************************************
  48            void EEPROM_WriteByte(uint16_t var_eepromAddress_u16, uint8_t var_eepromData_u8)
  49           ***************************************************************************************************
  50           * I/P Arguments: uint16_t: eeprom_address at which eeprom_data is to be written
  51                            uint8_t: byte of data to be to be written in eeprom.
  52           * Return value : none
  53          
  54           * description:This function is used to write the data at specified EEPROM_address..
  55                         At24xx ic is enabled by sending its ID on the i2c bus.
C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 2   

  56                         After selecting At24xx ic,select the address where the data is to written
  57                         Write the Data at selected EppromAddress
  58                         Stop the I2c communication.
  59          
  60          
  61          
  62              AT24xxx eeprom has two different memory addressing depending on the size of the.
  63              At24C01-At24C16 have single byte memory address where as AT24C32 to AT24C256 have 2-byte address.
  64          
  65                  Further the AT24xxx series eeproms have the memory structure divided into pages.
  66              Size of the page depends on the IC series ex:At24C04 has 8-byte page where as AT24C04 has 16-bytes.
  67          
  68                  -----------------------------------------------------------------------------------------
  69                                      SingleByteAddress: AT24C01 - AT24C16
  70                  ----------------------------------------------------------------------------------------*
  71                  For single byte memory address, the actual address is obtained by the below formula.
  72                  Actual page address = PageNumber * PageSize + Offset.
  73                  ex: if address is 700(2*256 + 188) then the actual memory location is 188th byte of page 2(PageSize = 256
             -)
  74                  For a 16bit address d8-d10 represents the Page number and d0-d7 the byte number in that page.
  75          
  76                  The page number has to be given as the part of eeprom Id(d1-d3)
  77                  The Byte number within the page should be the address, which is sent after the device ID
  78                  ------------------------------------------------------------------------------------------
  79          
  80          
  81          
  82                  -----------------------------------------------------------------------------------------
  83                                      DoubleByteAddress: AT24C32 - AT24C256
  84                  -----------------------------------------------------------------------------------------
  85                   For Double byte address, the 16bit address has to be sent into two bytes first MSB(D15 - D8)
  86                   followed by LSB(D7 - D0)
  87                  -----------------------------------------------------------------------------------------
  88          
  89          
  90                  Note: User doesn't have to worry about the address decoding as the library takes care of it.
  91                    It is just a info, so that proper IC needs to be selected into the eeprom.h file.             
  92          
  93          ***************************************************************************************************/
  94          void EEPROM_WriteByte(uint16_t var_eepromAddress_u16, uint8_t var_eepromData_u8)
  95          {       
  96   1      
  97   1              uint8_t var_eepromLowerAddress_u8;
  98   1              uint8_t var_eepromHigherAddress_u8;
  99   1              uint8_t var_eepromPageNumber_u8;
 100   1              uint8_t var_eepromId_u8 = C_EepromIdWriteMode_U8;
 101   1      
 102   1              if(var_eepromAddress_u16 < C_MaxEepromSize_U16) 
 103   1              {
 104   2                      var_eepromLowerAddress_u8 = util_ExtractByte0to8(var_eepromAddress_u16);
 105   2      
 106   2      #if (C_ByteAddring_U8 == C_SingleByteAddress_U8)
 107   2                      var_eepromPageNumber_u8 = util_ExtractByte8to16(var_eepromAddress_u16);
 108   2                      var_eepromId_u8 = var_eepromId_u8 | (var_eepromPageNumber_u8 << 1);
 109   2      #else
                      var_eepromHigherAddress_u8 = util_ExtractByte8to16(var_eepromAddress_u16);
              #endif
 112   2      
 113   2                      I2C_Start();                       // Start i2c communication
 114   2                                                         // connect to At24xx by sending its ID on I2c Bus
 115   2                      I2C_Write(var_eepromId_u8); 
 116   2      #if (C_ByteAddring_U8 == C_DoubleByteAddress_U8)        
C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 3   

                              I2C_Write(var_eepromHigherAddress_u8);
              #endif          
 119   2                      I2C_Write(var_eepromLowerAddress_u8); // Select the Specified EEPROM address of At24xx
 120   2                      I2C_Write(var_eepromData_u8);         // Write the data at specified address
 121   2                      I2C_Stop();                           // Stop i2c communication after Writing the data
 122   2      
 123   2                      DELAY_ms(10);                         // Write operation takes max 5ms, refer At24xx data sheet 
 124   2              }       
 125   1      }
*** WARNING C280 IN LINE 98 OF EEPROM.C: 'var_eepromHigherAddress_u8': unreferenced local variable
 126          
 127          
 128          
 129          
 130          
 131          
 132          /***************************************************************************************************
 133                         uint8_t EEPROM_ReadByte(uint16_t var_eepromAddress_u16)
 134           ***************************************************************************************************
 135           * I/P Arguments: uint16_t: eeprom_address from where eeprom_data is to be read.
 136           * Return value : uint8_t: data read from Eeprom.
 137          
 138           * description:
 139                     This function is used to read the data from specified EEPROM_address.
 140                     At24xx ic is enabled by sending its ID on the i2c bus.
 141                     After selecting At24xx ic,select the address from where the data is to read
 142                     Read the Data from selected EppromAddress
 143                     Stop the I2c communication.
 144                     Return the Data read from Eeprom
 145          
 146          
 147              AT24xxx eeprom has two different memory addressing depending on the size of the.
 148              At24C01-At24C16 have single byte memory address where as AT24C32 to AT24C256 have 2-byte address.
 149          
 150                  Further the AT24xxx series eeproms have the memory structure divided into pages.
 151              Size of the page depends on the IC series ex:At24C04 has 8-byte page where as AT24C04 has 16-bytes.
 152          
 153                  -----------------------------------------------------------------------------------------
 154                                      SingleByteAddress: AT24C01 - AT24C16
 155                  ----------------------------------------------------------------------------------------*
 156                  For single byte memory address, the actual address is obtained by the below formula.
 157                  Actual page address = PageNumber * PageSize + Offset.
 158                  ex: if address is 700(2*256 + 188) then the actual memory location is 188th byte of page 2(PageSize = 256
             -)
 159                  For a 16bit address d8-d10 represents the Page number and d0-d7 the byte number in that page.
 160          
 161                  The page number has to be given as the part of eeprom Id(d1-d3)
 162                  The Byte number within the page should be the address, which is sent after the device ID
 163                  ------------------------------------------------------------------------------------------
 164          
 165          
 166          
 167                  -----------------------------------------------------------------------------------------
 168                                      DoubleByteAddress: AT24C32 - AT24C256
 169                  -----------------------------------------------------------------------------------------
 170                   For Double byte address, the 16bit address has to be sent into two bytes first MSB(D15 - D8)
 171                   followed by LSB(D7 - D0)
 172                  -----------------------------------------------------------------------------------------
 173          
 174          
 175                  Note: User doesn't have to worry about the address decoding as the library takes care of it.
 176                    It is just a info, so that proper IC needs to be selected into the eeprom.h file.             
C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 4   

 177          
 178          ***************************************************************************************************/               
 179          uint8_t EEPROM_ReadByte(uint16_t var_eepromAddress_u16)
 180          {
 181   1              uint8_t var_eepromLowerAddress_u8;
 182   1              uint8_t var_eepromHigherAddress_u8;
 183   1              uint8_t var_eepromPageNumber_u8;
 184   1              uint8_t var_eepromData_u8 = 0x00;
 185   1              uint8_t var_eepromId_u8 = C_EepromIdWriteMode_U8;
 186   1      
 187   1              if(var_eepromAddress_u16 < C_MaxEepromSize_U16) 
 188   1              {
 189   2                      var_eepromLowerAddress_u8 = util_ExtractByte0to8(var_eepromAddress_u16);
 190   2      
 191   2      #if (C_ByteAddring_U8 == C_SingleByteAddress_U8)
 192   2                      var_eepromPageNumber_u8 = util_ExtractByte8to16(var_eepromAddress_u16);
 193   2                      var_eepromId_u8 = var_eepromId_u8 | (var_eepromPageNumber_u8 << 1); 
 194   2      #else
                      var_eepromHigherAddress_u8 = util_ExtractByte8to16(var_eepromAddress_u16);
              #endif
 197   2      
 198   2                      I2C_Start();                       // Start i2c communication
 199   2                                                          // connect to At24xx by sending its ID on I2c Bus
 200   2                      I2C_Write(var_eepromId_u8); 
 201   2      #if (C_ByteAddring_U8 == C_DoubleByteAddress_U8)        
                              I2C_Write(var_eepromHigherAddress_u8);
              #endif          
 204   2                      I2C_Write(var_eepromLowerAddress_u8); // Select the Specified EEPROM address of At24xx
 205   2      
 206   2                      I2C_Start();                          // Start i2c communication after selecting the address
 207   2                      I2C_Write(var_eepromId_u8 | 0x01);    // connect to At24xx(read) by sending its ID on I2c Bus
 208   2                      var_eepromData_u8 = I2C_Read(0);      // Read the data from specified address
 209   2                      I2C_Stop();                           // Stop i2c communication after Reading the data
 210   2                      DELAY_us(10);
 211   2      
 212   2              }
 213   1              return var_eepromData_u8;             // Return the data read from eeprom
 214   1      }
*** WARNING C280 IN LINE 182 OF EEPROM.C: 'var_eepromHigherAddress_u8': unreferenced local variable
 215          
 216          
 217          
 218          
 219          
 220          /***************************************************************************************************
 221          void EEPROM_WriteNBytes(uint16_t var_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfByte
             -s_u16)
 222           ***************************************************************************************************
 223           * I/P Arguments: uint16_t,: eeprom_address from where the N-bytes are to be written.
 224                            uint8_t*: Buffer(Pointer) containing the N-Bytes of data to be written in Eeprom.
 225                            uint16_t :  Number of bytes to be written
 226          
 227           * Return value : none
 228          
 229           * description:
 230                      This function is used to write N-bytes of data at specified EEPROM_address.
 231           ***************************************************************************************************/
 232          #if ( ENABLE_EEPROM_WriteNBytes == 1)
 233          void EEPROM_WriteNBytes(uint16_t var_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfByte
             -s_u16)
 234          {
 235   1              while(var_numOfBytes_u16 !=  0)
C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 5   

 236   1              {
 237   2                      EEPROM_WriteByte(var_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
 238   2                      var_eepromAddress_u16++;                                           //Increment the Eeprom Address
 239   2                      ptr_ramAddress_u8++;                                               //Increment the RAM Address
 240   2                      var_numOfBytes_u16--;                                      //Decrement NoOfBytes after writing each Byte
 241   2              }
 242   1      }
 243          #endif
 244          
 245          
 246          
 247          
 248          
 249          /***************************************************************************************************
 250          void EEPROM_ReadNBytes(uint16_t EepromAddr, uint8_t *RamAddr, uint16_t NoOfBytes)
 251           ***************************************************************************************************
 252           * I/P Arguments: uint16_t,: eeprom_address from where the N-bytes is to be read.
 253                            uint8_t*: Pointer to copy the N-bytes read from Eeprom.
 254                            uint16_t :  Number of bytes to be Read
 255          
 256           * Return value : none
 257          
 258           * description:
 259                      This function is used to Read N-bytes of data from specified EEPROM_address.
 260                      The data read from the eeprom will be copied into the specified RamAddress.
 261          
 262                  ##Note: Care should be taken to allocate enough buffer to read the data.
 263           ***************************************************************************************************/
 264          #if ( ENABLE_EEPROM_ReadNBytes == 1)
 265          void EEPROM_ReadNBytes(uint16_t var_eepromAddress_16, uint8_t *ptr_ramAddress_u8, uint16_t var_numOfBytes_
             -u16)
 266          {
 267   1              while(var_numOfBytes_u16 !=  0)
 268   1              {
 269   2                      *ptr_ramAddress_u8 = EEPROM_ReadByte(var_eepromAddress_16);//Read a byte from EEPROM to RAM
 270   2                      var_eepromAddress_16++;                                         //Increment the EEPROM Address
 271   2                      ptr_ramAddress_u8++;                                                    //Increment the RAM Address
 272   2                      var_numOfBytes_u16--;                                           //Decrement NoOfBytes after Reading each Byte
 273   2      
 274   2              }
 275   1      }
 276          #endif
 277          
 278          
 279          
 280          
 281          
 282          
 283          
 284          /***************************************************************************************************
 285           void EEPROM_WriteString(uint16_t var_eepromAddress_u16, char *ptr_stringPointer_u8)
 286           ***************************************************************************************************
 287           * I/P Arguments: uint16_t,: eeprom_address where the String is to be written.
 288                            char*: Pointer to String which has to be written.
 289          
 290           * Return value : none
 291          
 292           * description:This function is used to Write a String at specified EEPROM_address.
 293          
 294             NOTE: Null char is also written into the eeprom.
 295           ***************************************************************************************************/
 296          #if ( ENABLE_EEPROM_WriteString == 1)
C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 6   

              void EEPROM_WriteString(uint16_t var_eepromAddress_u16, char *ptr_stringPointer_u8)
              {
              
                      do
                      {
                              EEPROM_WriteByte(var_eepromAddress_u16,*ptr_stringPointer_u8); //Write a byte from RAM to EEPROM
                              ptr_stringPointer_u8++;                                                         //Increment the RAM Address
                              var_eepromAddress_u16++;                                                                //Increment the Eeprom Address
                      }while(*(ptr_stringPointer_u8-1) !=0);
              }
              #endif
 308          
 309          
 310          
 311          
 312          /***************************************************************************************************
 313          void EEPROM_ReadString(uint16_t var_eepromAddress_u16, char *ptr_destStringAddress_u8)
 314           ***************************************************************************************************
 315           * I/P Arguments: uint16_t,: eeprom_address from where the String is to be read.
 316                            char*: Pointer into which the String is to be read.
 317          
 318           * Return value : none
 319          
 320           * description:This function is used to Read a String from specified EEPROM_address.
 321                     The string read from eeprom will be copied to specified buffer along with NULL character
 322           ***************************************************************************************************/
 323          #if ( ENABLE_EEPROM_ReadString == 1)
              void EEPROM_ReadString(uint16_t var_eepromAddress_u16, char *ptr_destStringAddress_u8)
              {
                      char eeprom_data;
              
                      do
                      {
                              eeprom_data = EEPROM_ReadByte(var_eepromAddress_u16); //Read a byte from EEPROM to RAM
                              *ptr_destStringAddress_u8 = eeprom_data;                         //Copy the data into String Buffer
                              ptr_destStringAddress_u8++;                                              //Increment the RAM Address
                              var_eepromAddress_u16++;                                                         //Increment the Eeprom Address
                      }while(eeprom_data!=0);
              }
              #endif
 337          
 338          
 339          
 340          
 341          
 342          /***************************************************************************************************
 343                                             void EEPROM_Erase()
 344           ***************************************************************************************************
 345           * I/P Arguments: none
 346          
 347           * Return value : none
 348          
 349           * description: This function is used to erase the entire Eeprom memory.
 350                         Complete Eeprom(C_MaxEepromSize_U16) is filled with 0xFF to accomplish the Eeprom Erase.
 351           ***************************************************************************************************/
 352          #if ( ENABLE_EEPROM_Erase == 1)
              void EEPROM_Erase()
              {
                      uint16_t var_eepromAddress_u16;
              
                      for(var_eepromAddress_u16=0;var_eepromAddress_u16<C_MaxEepromSize_U16;var_eepromAddress_u16++)
                      {
C51 COMPILER V9.02   EEPROM                                                                02/01/2015 21:04:26 PAGE 7   

                              EEPROM_WriteByte(var_eepromAddress_u16,0xffu); // Write Each memory location with OxFF
                      }
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    242    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
