C51 COMPILER V9.02   I2C                                                                   02/01/2015 19:05:29 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN i2c.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE i2c.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /***************************************************************************************************
   2                                             ExploreEmbedded      
   3          ****************************************************************************************************
   4           * File:   i2c.h
   5           * Version: 15.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: Contains the library routines for I2C read,write operation
   9          
  10          The libraries have been tested on ExploreEmbedded development boards. We strongly believe that the 
  11          library works on any of development boards for respective controllers. However, ExploreEmbedded 
  12          disclaims any kind of hardware failure resulting out of usage of libraries, directly or indirectly.
  13          Files may be subject to change without prior notice. The revision history contains the information 
  14          related to updates. 
  15          
  16          
  17          GNU GENERAL PUBLIC LICENSE: 
  18              This program is free software: you can redistribute it and/or modify
  19              it under the terms of the GNU General Public License as published by
  20              the Free Software Foundation, either version 3 of the License, or
  21              (at your option) any later version.
  22          
  23              This program is distributed in the hope that it will be useful,
  24              but WITHOUT ANY WARRANTY; without even the implied warranty of
  25              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  26              GNU General Public License for more details.
  27          
  28              You should have received a copy of the GNU General Public License
  29              along with this program.  If not, see <http://www.gnu.org/licenses/>.
  30          
  31          Errors and omissions should be reported to codelibraries@exploreembedded.com
  32          ***************************************************************************************************/
  33          
  34          
  35          
  36          
  37          /***************************************************************************************************
  38                                       Revision History
  39          ****************************************************************************************************
  40          15.0: Initial version 
  41          ***************************************************************************************************/
  42          
  43          #include "delay.h"
  44          #include "i2c.h"
  45          
  46          
  47          /***************************************************************************************************
  48                                    Local Function declaration
  49          ***************************************************************************************************/                                            
             -  
  50          static void i2c_Clock(void);
  51          static void i2c_Ack();
  52          static void i2c_NoAck();
  53          /**************************************************************************************************/
  54          
C51 COMPILER V9.02   I2C                                                                   02/01/2015 19:05:29 PAGE 2   

  55          
  56          
  57          
  58          
  59          
  60          
  61          /***************************************************************************************************
  62                                   void I2C_Init()
  63          ****************************************************************************************************
  64           * I/P Arguments: none.
  65           * Return value  : none
  66          
  67           * description  :This function is used to initialize the I2C module.
  68          ***************************************************************************************************/
  69           void I2C_Init()
  70           {
  71   1       
  72   1       }
  73           
  74           
  75           
  76           
  77          
  78          /***************************************************************************************************
  79                                   void I2C_Start()
  80          ****************************************************************************************************
  81           * I/P Arguments: none.
  82           * Return value  : none
  83          
  84           * description  :This function is used to generate I2C Start Condition.
  85                           Start Condition: SDA goes low when SCL is High.
  86          
  87                                         ____________
  88                          SCL:          |            |
  89                                ________|            |______
  90                                     _________
  91                          SDA:      |         |
  92                                ____|         |____________
  93          
  94          ***************************************************************************************************/
  95          void I2C_Start()
  96          {
  97   1      
  98   1              SCL = 0;        // Pull SCL low
  99   1              SDA = 1;        // Pull SDA High
 100   1              DELAY_us(1);
 101   1              SCL = 1;        //Pull SCL high
 102   1              DELAY_us(1);
 103   1              SDA = 0;        //Now Pull SDA LOW, to generate the Start Condition
 104   1              DELAY_us(1);
 105   1              SCL = 0;        //Finally Clear the SCL to complete the cycle
 106   1      
 107   1      }
 108          
 109          
 110          
 111          
 112          
 113          /***************************************************************************************************
 114                                   void I2C_Stop()
 115          ****************************************************************************************************
 116           * I/P Arguments: none.
C51 COMPILER V9.02   I2C                                                                   02/01/2015 19:05:29 PAGE 3   

 117           * Return value  : none
 118          
 119           * description  :This function is used to generate I2C Stop Condition.
 120                           Stop Condition: SDA goes High when SCL is High.
 121          
 122                                         ____________
 123                          SCL:          |            |
 124                                ________|            |______
 125                                           _________________
 126                          SDA:            |
 127                                __________|
 128          
 129          ***************************************************************************************************/
 130          
 131          void I2C_Stop(void)
 132          {
 133   1      
 134   1              SCL = 0;            // Pull SCL low
 135   1              DELAY_us(1);
 136   1              SDA = 0;            // Pull SDA  low
 137   1              DELAY_us(1);
 138   1              SCL = 1;            // Pull SCL High
 139   1              DELAY_us(1);
 140   1              SDA = 1;            // Now Pull SDA High, to generate the Stop Condition
 141   1      }
 142          
 143          
 144          
 145          
 146          
 147          
 148          
 149          
 150          /***************************************************************************************************
 151                                   void I2C_Write(uint8_t var_i2cData_u8)
 152          ****************************************************************************************************
 153           * I/P Arguments: uint8_t-->8bit data to be sent.
 154           * Return value  : none
 155          
 156           * description  :This function is used to send a byte on SDA line using I2C protocol
 157                           8bit data is sent bit-by-bit on each clock cycle.
 158                           MSB(bit) is sent first and LSB(bit) is sent at last.
 159                           Data is sent when SCL is low.
 160          
 161                   ___     ___     ___     ___     ___     ___     ___     ___     ___     ___
 162           SCL:   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 163                __|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___
 164          
 165           SDA:    D8       D7     D6      D5      D4       D3      D2      D1      D0     ACK
 166          
 167          
 168          ***************************************************************************************************/
 169          void I2C_Write(uint8_t var_i2cData_u8)
 170          {
 171   1              uint8_t i;
 172   1      
 173   1              for(i=0;i<8;i++)                   // loop 8 times to send 1-byte of data
 174   1              {
 175   2                      SDA = var_i2cData_u8 & 0x80;     // Send Bit by Bit on SDA line
 176   2                      i2c_Clock();                   // Generate Clock at SCL
 177   2                      var_i2cData_u8 = var_i2cData_u8<<1;// Bring the next bit to be transmitted to MSB position
 178   2              }
C51 COMPILER V9.02   I2C                                                                   02/01/2015 19:05:29 PAGE 4   

 179   1                                   
 180   1              i2c_Clock();
 181   1      }
 182          
 183          
 184          
 185          
 186          
 187          
 188          /***************************************************************************************************
 189                                   uint8_t I2C_Read(uint8_t var_ackOption_u8)
 190          ****************************************************************************************************
 191           * I/P Arguments: none.
 192           * Return value  : uint8_t(received byte)
 193          
 194           * description :This fun is used to receive a byte on SDA line using I2C protocol.
 195                         8bit data is received bit-by-bit each clock and finally packed into Byte.
 196                         MSB(bit) is received first and LSB(bit) is received at last.
 197          
 198          
 199                   ___     ___     ___     ___     ___     ___     ___     ___     ___     ___
 200          SCL:    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 201                __|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |__
 202          
 203           SDA:    D8       D7     D6      D5       D4     D3       D2      D1     D0      ACK
 204          
 205          
 206          ***************************************************************************************************/
 207          uint8_t I2C_Read(uint8_t var_ackOption_u8)
 208          {
 209   1              uint8_t i, var_i2cData_u8=0x00;
 210   1      
 211   1              SDA=1;               //Make SDA as I/P
 212   1              for(i=0;i<8;i++)     // loop 8times read 1-byte of data
 213   1              {
 214   2                      DELAY_us(1);
 215   2                      SCL = 1;         // Pull SCL High
 216   2                      DELAY_us(1);
 217   2      
 218   2                      var_i2cData_u8 = var_i2cData_u8<<1;    //var_i2cData_u8 is Shifted each time and
 219   2                      var_i2cData_u8 = var_i2cData_u8 | SDA; //ORed with the received bit to pack into byte
 220   2      
 221   2                      SCL = 0;         // Clear SCL to complete the Clock
 222   2              }
 223   1              if(var_ackOption_u8==1)  /*Send the Ack/NoAck depending on the user option*/
 224   1              {
 225   2                      i2c_Ack();
 226   2              }
 227   1              else
 228   1              {
 229   2                      i2c_NoAck();
 230   2              }
 231   1      
 232   1              return var_i2cData_u8;           // Finally return the received Byte*
 233   1      }
 234          
 235          
 236          
 237          
 238          
 239          
 240          /***************************************************************************************************
C51 COMPILER V9.02   I2C                                                                   02/01/2015 19:05:29 PAGE 5   

 241                                          Local functions
 242          ***************************************************************************************************/
 243                                                                          
 244          
 245          /***************************************************************************************************
 246                                   static void i2c_Clock()
 247          ****************************************************************************************************
 248           * I/P Arguments: none.
 249           * Return value  : none
 250          
 251           * description  :This function is used to generate a clock pulse on SCL line.
 252          ***************************************************************************************************/
 253          static void i2c_Clock(void)
 254          {
 255   1              DELAY_us(1);
 256   1              SCL = 1;            // Wait for Some time and Pull the SCL line High
 257   1              DELAY_us(1);        // Wait for Some time
 258   1              SCL = 0;            // Pull back the SCL line low to Generate a clock pulse
 259   1      }
 260          
 261          
 262          
 263          
 264          
 265          /***************************************************************************************************
 266                                   static void i2c_Ack()
 267           ***************************************************************************************************
 268           * I/P Arguments: none.
 269           * Return value  : none
 270          
 271           * description  :This function is used to generate a the Positive ACK
 272                           pulse on SDA after receiving a byte.
 273          ***************************************************************************************************/
 274          static void i2c_Ack()
 275          {
 276   1              SDA = 0;        //Pull SDA low to indicate Positive ACK
 277   1              i2c_Clock();    //Generate the Clock
 278   1              SDA = 1;        // Pull SDA back to High(IDLE state)
 279   1      }
 280          
 281          
 282          
 283          
 284          
 285          /***************************************************************************************************
 286                                  static void i2c_NoAck()
 287           ***************************************************************************************************
 288           * I/P Arguments: none.
 289           * Return value  : none
 290          
 291           * description  :This function is used to generate a the Negative/NO ACK
 292                           pulse on SDA after receiving all bytes.
 293          ***************************************************************************************************/
 294          static void i2c_NoAck()
 295          {
 296   1              SDA = 1;         //Pull SDA high to indicate Negative/NO ACK
 297   1              i2c_Clock();     // Generate the Clock  
 298   1              SCL = 1;         // Set SCL 
 299   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.02   I2C                                                                   02/01/2015 19:05:29 PAGE 6   

   CODE SIZE        =    188    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
